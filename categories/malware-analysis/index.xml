<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Malware Analysis - Category - irfan_eternal</title><link>https://irfan-eternal.github.io/categories/malware-analysis/</link><description>Malware Analysis - Category - irfan_eternal</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>irfan_eternal@proton.me (irfan_eternal)</managingEditor><webMaster>irfan_eternal@proton.me (irfan_eternal)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 06 Jan 2024 11:35:00 +0800</lastBuildDate><atom:link href="https://irfan-eternal.github.io/categories/malware-analysis/" rel="self" type="application/rss+xml"/><item><title>Understanding Internals of SmokeLoader</title><link>https://irfan-eternal.github.io/understanding-internals-of-smokeloader/</link><pubDate>Sat, 06 Jan 2024 11:35:00 +0800</pubDate><author>irfan_eternal</author><guid>https://irfan-eternal.github.io/understanding-internals-of-smokeloader/</guid><description>&lt;div class="featured-image">
&lt;img src="/smokeloader.jpg" referrerpolicy="no-referrer">
&lt;/div>Introduction In this blog we will be discussing about Understanding Internals of SmokeLoader using Ghidra
Analysis For readers who want to Follow along can get the sample from MalwareBazaar .The sample was first Seen on September 5th 2023 14:12:29 UTC . The sample is 32bit Exe File You can use the tool of your Choice i will be using Ghidra in this blog. The Sample Consists of 3 Stages. In the next sections we will look at each Stages in Detail</description></item><item><title>Analysing .NET AsyncRAT using dnSpy</title><link>https://irfan-eternal.github.io/analysing-.net-asyncrat-using-dnspy/</link><pubDate>Sat, 19 Aug 2023 11:35:00 +0800</pubDate><author>irfan_eternal</author><guid>https://irfan-eternal.github.io/analysing-.net-asyncrat-using-dnspy/</guid><description>&lt;div class="featured-image">
&lt;img src="/asyncrat.jpg" referrerpolicy="no-referrer">
&lt;/div>Introduction Hi all, Today we will be analysing .NET AsynRAT using dnSpy.In this blog we will be discussing about static extraction of the Config and we will also look at some of the capabilites of AsyncRAT.
Analysis For readers who want to Follow along can get the sample from MalwareBazaar .The sample was first Seen on 2023-07-04 07:07:39 UTC . The sample is 32bit so you can use dnSpy 32 Bit Version.</description></item><item><title>Guloader Deobfuscation using Ghidra</title><link>https://irfan-eternal.github.io/guloader-deobfuscation-using-ghidra/</link><pubDate>Sun, 23 Jul 2023 11:35:00 +0800</pubDate><author>irfan_eternal</author><guid>https://irfan-eternal.github.io/guloader-deobfuscation-using-ghidra/</guid><description><![CDATA[<div class="featured-image">
                <img src="/gloader.jpg" referrerpolicy="no-referrer">
            </div>Introduction Hi all, Today we will be Analyzing Guloader Shellcode using Ghidra. Our Objective is to Identify some Anti-analysis and Obfuscation techniques used by Guloader and Defeat it using Automation. People who would like to follow along can download the sample from here . The File was was seen on 2023-05-11
Anti-Analysis / Obfuscation API Hashing The Shellcode is using API hashing to hide API&rsquo;s being called. For Each API Resolving it first resolves LdrLoadDll add 5 to it&rsquo;s address to avoid any Hooking done by EDR .]]></description></item><item><title>Unmapping PE files, fixing Alignment and Fixing corrupted/Missing PE Header</title><link>https://irfan-eternal.github.io/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/</link><pubDate>Fri, 30 Sep 2022 11:35:00 +0800</pubDate><author>irfan_eternal</author><guid>https://irfan-eternal.github.io/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/</guid><description>&lt;div class="featured-image">
&lt;img src="/unpack.jpg" referrerpolicy="no-referrer">
&lt;/div>Hi all, Today I am writing this Post to help you fix the common problems faced while unpacking malware They are
Unmapping PE files Fixing Alignment and Fixing corrupted/Missing PE Header First we will be Discussing how to Unmap PE file
Unmapping PE files While Unpacking malware we dump the mapped binary into file. For proper analysis we need to convert this to an Unmapped Binary. We can make sure that the binary is mapped by looking at the raw address of first section, it will be always 1000 .</description></item></channel></rss>