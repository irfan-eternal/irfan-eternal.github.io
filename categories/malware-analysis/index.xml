<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Malware Analysis - Category - irfan_eternal</title><link>https://irfan-eternal.github.io/categories/malware-analysis/</link><description>Malware Analysis - Category - irfan_eternal</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>irfan_eternal@proton.me (irfan_eternal)</managingEditor><webMaster>irfan_eternal@proton.me (irfan_eternal)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 23 Jul 2023 11:35:00 +0800</lastBuildDate><atom:link href="https://irfan-eternal.github.io/categories/malware-analysis/" rel="self" type="application/rss+xml"/><item><title>Guloader Deobfuscation using Ghidra</title><link>https://irfan-eternal.github.io/guloader-deobfuscation-using-ghidra/</link><pubDate>Sun, 23 Jul 2023 11:35:00 +0800</pubDate><author>irfan_eternal</author><guid>https://irfan-eternal.github.io/guloader-deobfuscation-using-ghidra/</guid><description>Introduction Hi all, Today we will be Analyzing Guloader Shellcode using Ghidra. Our Objective is to Identify some Anti-analysis and Obfuscation techniques used by Guloader and Defeat it using Automation
Anti-Analysis / Obfuscation API Hashing The Shellcode is using API hashing to hide API&amp;rsquo;s being called. For Each API Resolving it first resolves LdrLoadDll add 5 to it&amp;rsquo;s address to avoid any Hooking done by EDR . It then use this address to Load the DLL.</description></item><item><title>Malware String Decryption in 2 ways</title><link>https://irfan-eternal.github.io/malware-string-decryption-in-2-ways/</link><pubDate>Sun, 16 Apr 2023 18:06:47 -0400</pubDate><author>irfan_eternal</author><guid>https://irfan-eternal.github.io/malware-string-decryption-in-2-ways/</guid><description>Hi all, Today I am writing a blog about Decrypting malware strings using 2 ways. I have posted a tweet about this 2 days ago . The 2 Ways are
Emulating Scripting Emulating For Emulation i used the tool dumpulator by mrexodia. To use the tool we needed to find the decryption function, it&amp;rsquo;s calling Convetion and the parameters being passed
in this Example the function uses __fastcall calling convention and it has 4 parameters first 2 parameters are in ECX, EDX.</description></item><item><title>Analysing Shellcode to understand how they call windows API's</title><link>https://irfan-eternal.github.io/analysing-shellcode-to-understand-how-they-call-windows-apis/</link><pubDate>Wed, 28 Dec 2022 11:35:00 +0800</pubDate><author>irfan_eternal</author><guid>https://irfan-eternal.github.io/analysing-shellcode-to-understand-how-they-call-windows-apis/</guid><description><![CDATA[Introduction Hi all, Today we will be Analysing Shellcode to understand how they call windows API&rsquo;s. shellcode&rsquo;s are position independent, they do not have IAT to call API&rsquo;s. They normally walk the PEB(Process Environment Block).To understand theory on how PEB is used to get API&rsquo;s please read this article We will follow how a malware use this technique to call windows API&rsquo;s .
Analysis The malware First allocates memory and copies the shellcode from the rsrc section to the allocated memory]]></description></item><item><title>Improving My Ghidra GUI + Ghidra Skills</title><link>https://irfan-eternal.github.io/improving-my-ghidra-gui--ghidra-skills/</link><pubDate>Wed, 23 Nov 2022 11:35:00 +0800</pubDate><author>irfan_eternal</author><guid>https://irfan-eternal.github.io/improving-my-ghidra-gui--ghidra-skills/</guid><description>Hi all, Today I am writitng this post to let you know how i improved My Ghidra GUI &amp;amp; Ghidra Skills. We will be Discussing the below topics
Customizing Code Browser Key Bindings Ghidra Extensions Ghidra Scripting Customizing Code Browser Ghidra CodeBrowser has many Windows which helps in our analysis. My aim was to reduce switchig between Windows as less as possible. So I found the Windows i used the most and Combined them in the Main CodeBrowser Window.</description></item><item><title>Unmapping PE files, fixing Alignment and Fixing corrupted/Missing PE Header</title><link>https://irfan-eternal.github.io/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/</link><pubDate>Fri, 30 Sep 2022 11:35:00 +0800</pubDate><author>irfan_eternal</author><guid>https://irfan-eternal.github.io/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/</guid><description>Hi all, Today I am writing this Post to help you fix the common problems faced while unpacking malware They are
Unmapping PE files Fixing Alignment and Fixing corrupted/Missing PE Header First we will be Discussing how to Unmap PE file
Unmapping PE files While Unpacking malware we dump the mapped binary into file. For proper analysis we need to convert this to an Unmapped Binary. We can make sure that the binary is mapped by looking at the raw address of first section, it will be always 1000 .</description></item></channel></rss>