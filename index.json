[{"categories":["Malware Analysis"],"content":"Improving My Ghidra GUI + Ghidra Skills","date":"2022-11-23","objectID":"/improving-my-ghidra-gui--ghidra-skills/","tags":null,"title":"Improving My Ghidra GUI + Ghidra Skills","uri":"/improving-my-ghidra-gui--ghidra-skills/"},{"categories":["Malware Analysis"],"content":" Hi all, Today I am writitng this post to let you know how i improved My Ghidra GUI \u0026 Ghidra Skills. We will be Discussing the below topics Customizing Code Browser Key Bindings Ghidra Extensions Ghidra Scripting ","date":"2022-11-23","objectID":"/improving-my-ghidra-gui--ghidra-skills/:0:0","tags":null,"title":"Improving My Ghidra GUI + Ghidra Skills","uri":"/improving-my-ghidra-gui--ghidra-skills/"},{"categories":["Malware Analysis"],"content":"Customizing Code Browser Ghidra CodeBrowser has many Windows which helps in our analysis. My aim was to reduce switchig between Windows as less as possible. So I found the Windows i used the most and Combined them in the Main CodeBrowser Window. The Sections in My CodeBrowser Windows are Symbol Tree Data Type Manager Listing Window Function Graph Function Call Graph Decompiler Defined Strings Console Bookmarks Python I won’t recommend you to use this Same Sections. Try to find the Windows you use the most and Combine them in the CodeBrowser. You Can add this Windows by Visiting Windows \u003e “Windows you want to View”. After that adjust them by dragging the Windows Ghidra Lets you Cutomize the Code Browser by Visiting Edit \u003e Tool Options. An option which helped me a lot is Cursor Text Highlighting: Edit \u003e Tool Options \u003e Cursor Text Highlight \u003e Mouse Button to Activate : LEFT (This will highlight the occurence of a selected string in Listing/Decompiler Window) ","date":"2022-11-23","objectID":"/improving-my-ghidra-gui--ghidra-skills/:1:0","tags":null,"title":"Improving My Ghidra GUI + Ghidra Skills","uri":"/improving-my-ghidra-gui--ghidra-skills/"},{"categories":["Malware Analysis"],"content":"Key Bindings Ghidra Key Bindings helps you to perform actions related to Ghidra. Ghidra Has So many default KeyBindings Full List of Key Bindings. Ghidra also help you to add custom Key Bindings by visiting Edit \u003e Tool Options \u003e Key Binding. Here is a list of Key Bindings(Default + Custom) I use the most L : Edit Label / Rename Function / Rename Variable Ctrl + L : Retype Variable T: Choose Data Type X: Show Xrefs TO Shift + [ = Create Structure F3 = Edit Function Signature C = Clear Code D = Disassemble Find the actions you perform the Most. look if there is a Key Binding for it. if not add a custom Key Binding. Setting Key Bindings for most used actions is a good practice ","date":"2022-11-23","objectID":"/improving-my-ghidra-gui--ghidra-skills/:2:0","tags":null,"title":"Improving My Ghidra GUI + Ghidra Skills","uri":"/improving-my-ghidra-gui--ghidra-skills/"},{"categories":["Malware Analysis"],"content":"Ghidra Extensions Ghidra Extensions help you to import other features which are not in Ghidra. You can install a Ghidra Extension in GUI by going to Ghidra project Manager Window.Click File → Install Extensions \u003e Click on the ‘+’ icon in the Top left \u003e Select the folder Which Contain the Ghidra Extension. Find the Ghidra Documentation for extensions Here .These are the Two Extensions i have found usefull Ghidrathon : The FLARE team’s open-source extension to add Python 3 scripting to Ghidra. Kaiju : Kaiju is a binary analysis framework extension for the Ghidra software reverse engineering suite ","date":"2022-11-23","objectID":"/improving-my-ghidra-gui--ghidra-skills/:3:0","tags":null,"title":"Improving My Ghidra GUI + Ghidra Skills","uri":"/improving-my-ghidra-gui--ghidra-skills/"},{"categories":["Malware Analysis"],"content":"Ghidra Scripting Ghidra Supports Scripting in multiple languages. I use python for scripting in Ghidra. Ghidra API is very powerfull that we can replace a Multiline code with a single Ghidra API function Call.I will Show some of the Cool Ghidra API Functions Belw find(Address addr, byte[] values) : Searches memory from ‘addr’ for ‘values’ and returns the address of ‘values’ if it is found getBytes(Address addr, int length) : Return ’length’ bytes from memory starting from ‘addr’ getReferencesto( Address addr) : Get All the XREF’s to addr setEOLComment(Address addr, String message): Add an EOLComment at ‘addr’ which has the comment ‘message’ createBookmark(Addres addr, String category, String note): Creates a NOTE bookmark at ‘addr’ toAddr​(String addressString) : Returns a new address inside the specified program as indicated by the ‘addressString’. This the just a tip of the iceberg. There so many other Functions in the Ghidra API . Refer this for more details Here is a Ghidra Script i wrote to Decrypt an XOR encrypted Sring table from ghidra.app.decompiler import DecompileOptions from ghidra.app.decompiler import DecompInterface from ghidra.util.task import ConsoleTaskMonitor def decrypter(data_string, data_key): decoded = '' for i in xrange(0, len(data_string): decoded += chr((data_string[i]) ^ (data_key[i % len(data_key)])) return decoded enc_address_start = askAddress(\"Provide Address of Encrypred String\", \"Address\") enc_address_end = find(enc_address_start, [00, 00]) len_address = int(str(enc_address_end), 16) - int(str(enc_address_start), 16) data = getBytes(enc_address_start, len_address) key_address_start = askAddress(\"Provide Address of Key String\", \"Address\") key_address_end = find(key_address_start, [00, 00]) len_address_key = int(str(key_address_end), 16) - int(str(key_address_start), 16) key = b'' key = getBytes(key_address_start, len_address_key) global decoded decoded = decrypter(data, key) mw_decrypt = askAddress(\"Provide Address of decrypt function\", \"Address\") refs = getReferencesTo(mw_decrypt) options = DecompileOptions() monitor = ConsoleTaskMonitor() ifc = DecompInterface() ifc.setOptions(options) ifc.openProgram(currentProgram) for xref in refs: i = xref.getFromAddress() func = getFunctionContaining(i) res = ifc.decompileFunction( func, 60, monitor) high_func = res.getHighFunction() pcodeops = high_func.getPcodeOps(i) op = pcodeops.next() print(str(i)) param = op.getInputs() offset = str(param[1]).split(\",\") offset_1 = offset[1] offset_int = int(offset_1.lstrip(), 16) decrypted_string = decoded[offset_int:].split(\"\\x00\")[0] print(decrypted_string) setEOLComment (i, decrypted string) ","date":"2022-11-23","objectID":"/improving-my-ghidra-gui--ghidra-skills/:4:0","tags":null,"title":"Improving My Ghidra GUI + Ghidra Skills","uri":"/improving-my-ghidra-gui--ghidra-skills/"},{"categories":["Malware Analysis"],"content":"References The Ghidra Book exploitreversing Awesome Ghidra Matthew ","date":"2022-11-23","objectID":"/improving-my-ghidra-gui--ghidra-skills/:5:0","tags":null,"title":"Improving My Ghidra GUI + Ghidra Skills","uri":"/improving-my-ghidra-gui--ghidra-skills/"},{"categories":["Malware Analysis"],"content":"Unmapping PE files, fixing Alignment and Fixing coruupted/Missing PE Header","date":"2022-09-30","objectID":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/","tags":null,"title":"Unmapping PE files, fixing Alignment and Fixing corrupted/Missing PE Header","uri":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/"},{"categories":["Malware Analysis"],"content":" Hi all, Today I am writing this Post to help you fix the common problems faced while unpacking malware They are Unmapping PE files Fixing Alignment and Fixing corrupted/Missing PE Header First we will be Discussing how to Unmap PE file ","date":"2022-09-30","objectID":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/:0:0","tags":null,"title":"Unmapping PE files, fixing Alignment and Fixing corrupted/Missing PE Header","uri":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/"},{"categories":["Malware Analysis"],"content":"Unmapping PE files While Unpacking malware we dump the mapped binary into file. For proper analysis we need to convert this to an Unmapped Binary. We can make sure that the binary is mapped by looking at the raw address of first section, it will be always 1000 . For unmapped binaries the first section starts at 400. The tools we will be using are PE-bear and HxD Purpose The purpose of unmapping a File is to make the sections line up correctly.In the mapped PE, sections are not lined up correctly due to this we cannot see informations like imports and exports of the PE. By unmapping we can make the sections line up correctly and view informations like imports and exports of the PE Steps Open the File in PE-bear go to the Section Hdrs tab Make the Raw address match the Virtual address of Sections Set the Raw size and Virtual size correctly using this formula Raw size of Section n = VA of section n+1 - VA of section n Ex : Raw size of first Section(.text 22000) = Virtual Address of Section 2 (.rdata = 23000) - Virtual Address of Section 1 (.text = 1000) Follow this formula for all Other section except reloc Make the Virtual Size match the Raw size for all sections except reloc Make reloc size 0 Because reloc section only exist in disk . since we have dumped the pe from memory it won’t have reloc section Go to Optional Header tab and make sure the image base is same as the packed binary’s image Base This is the Final Unmapped PE. Save It ","date":"2022-09-30","objectID":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/:1:0","tags":null,"title":"Unmapping PE files, fixing Alignment and Fixing corrupted/Missing PE Header","uri":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/"},{"categories":["Malware Analysis"],"content":"Fixing Alignment and Fixing corrupted/Missing PE Header While Unpacking malware some malware authors corrupt the PE headers of unpacked sample. So after Dumping the memory we need to add PE header to the file Steps First add the correct PE header : Look for 4c 01 / 64 86 (CPU architecture in optional header ) open the corrupted file and a known good PE file and copy and paste the PE header of good file ( till 4c0 1 / 64 86) using HxD to the corrupted file ( till 4c 01 / 64 86) Check and fix section alignment : Move to raw address of Section 1 .Is the byte zeroed out correctly till the start ,if not add null (00) bytes till the start of section 1 using HxD ","date":"2022-09-30","objectID":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/:2:0","tags":null,"title":"Unmapping PE files, fixing Alignment and Fixing corrupted/Missing PE Header","uri":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/"},{"categories":["Malware Analysis"],"content":"References OALabs exploitreversing ","date":"2022-09-30","objectID":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/:3:0","tags":null,"title":"Unmapping PE files, fixing Alignment and Fixing corrupted/Missing PE Header","uri":"/unmapping-pe-files-fixing-alignment-and-fixing-corrupted-or-missing-pe-header/"},{"categories":null,"content":"About Me","date":"2022-09-29","objectID":"/about/","tags":null,"title":"About Me","uri":"/about/"},{"categories":null,"content":" Hi all. I am irfan_eternal. Malware analyst interested in Reverse Engineering. I have been working in the Blue Side for 2 years. I love analysing malwares because It is more of a puzzle. where we are trying to identify what it does by defeating anti-analysis techniques ","date":"2022-09-29","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"},{"categories":null,"content":"Skills Static and Dynamic Malware Analysis Analysis of Web Attacks Reverse Engineering Automation YARA Rule Creation to detect Malware ","date":"2022-09-29","objectID":"/about/:0:1","tags":null,"title":"About Me","uri":"/about/"}]